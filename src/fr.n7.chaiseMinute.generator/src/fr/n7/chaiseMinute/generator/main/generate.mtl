[comment encoding = UTF-8 /]
[module generate('http://chaiseMinute', 'http://function')]


[template public generateElement(aChaiseMinute : ChaiseMinute)]
[comment @main/]
[file ((aChaiseMinute.name)+'.py', false, 'UTF-8')]
import sys
import pandas as pd

def internal_or_external(intern, extern, table, id):
	if intern['['/]id].to_list() == None:
		return extern['['/]table]['['/]id].to_list()
	else:
		return intern['['/]id].to_list()


def main():
# Load files
	content = {}	
[for (t : Table | aChaiseMinute.getTables())]
	csv_file_path = ['"' + t.name+ '.csv'+'"'/]
	content['['/]"[t.name/]"] = pd.read_csv(csv_file_path)
[/for]	

[for (t : Table | aChaiseMinute.getTables())]
[t.generateElement()/]
[/for]	
	
if __name__ == '__main__':
	main()

[/file]
[/template]

[query public getTable(arg : ChaiseMinute, name: String) : Table = arg.tables 
-> select(e | e.oclIsTypeOf(Table) and e.name = name)
-> collect(e | e.oclAsType(Table)) 
/]
[query public getTables(arg : ChaiseMinute): OrderedSet(Table) = arg.tables 
-> select(e | e.oclIsTypeOf(Table))
-> collect(e | e.oclAsType(Table)) 
-> asOrderedSet()
/]

[template public generateElement(aTable: Table)]
	out = {}

	#### Table: [aTable.name/] ####

	[for (c: Column | aTable.columns)]
		[if (c.oclIsKindOf(ColumnData))]
	### Data column: [c.id/] ###
	out['['/]"[c.id/]"]=content['['/]"[aTable.name/]"]['['/]"[c.id/]"]
		[elseif (c.oclIsTypeOf(ImportedColumn))]
			[let table:String = c.oclAsType(ImportedColumn).path.replaceAll('\\..*', '')]
			[let id:String = c.oclAsType(ImportedColumn).path.replaceFirst('.*\\.', '')]
	### Imported column: [c.id/] from [c.oclAsType(ImportedColumn).path/] ###
	out['['/]"[c.id/]"]=content['['/]"[table/]"]['['/]"[id/]"]
			[/let]
			[/let]
		[else]
		[/if]
	[/for]
	[for (c: Column | aTable.columns)]
		[if (c.oclIsKindOf(ComputedColumn))]
	### Computed column: [c.id/] ###

			[for (f : Function | c.oclAsType(ComputedColumn).algorithm.functions) ]
	from [f.name/] import [f.name/]
	out['['/]"[c.id/]"] = [f.name/](
				[for (input : Argument | f.inputs)]
					[if input.oclIsTypeOf(ColumnArgument)]
						[let table:String = input.oclAsType(ColumnArgument).columnPath.replaceAll('\\..*', '')]
						[let id:String = input.oclAsType(ColumnArgument).columnPath.replaceFirst('.*\\.', '')]
						internal_or_external(out, content, "[table/]", "[id/]"),
						[/let][/let]
					[/if]
				[/for]
		)
			[/for]
		[/if]
	[/for]


	pd.DataFrame.from_dict(out, orient="columns").to_csv("output_"+"[aTable.name/]"+".csv", index_label="[aTable.indexColumn.id/]")
	################
[/template]