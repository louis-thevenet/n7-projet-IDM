[comment encoding = UTF-8 /]
[module toPython('http://calculus')]

[template public generateElement(aCalculus : Calculus)]
[comment @main/]
[file ((aCalculus.name)+'.py', false, 'UTF-8')]

def [aCalculus.name/]([for (a : InputsArgs | aCalculus.getInputArgs())][name/],[/for]):
	[for (e : Expression | aCalculus.getExpressions())]
		
	[if (e.oclIsKindOf(InputsArgs))]
	[elseif (e.oclIsKindOf(BinaryExpression))]
	[let be : BinaryExpression = e.oclAsType(BinaryExpression)]
		[be.name/] = [be.first.name/] [be.op/] [be.second.name/] 
	[/let]
	[elseif (e.oclIsKindOf(UnaryExpression))]
	[let ue : UnaryExpression = e.oclAsType(UnaryExpression)]
		[ue.name/] = [ue.op/] [ue.input.name/] 
	[/let]
	[elseif (e.oclIsKindOf(FinaleExpression))]
	[let fe : FinaleExpression = e.oclAsType(FinaleExpression)]
		return [fe.name/] = [fe.from.name/]
	[/let]
	[/if]
	[/for]
 
[/file]
[/template]

[query public getInputArgs(arg : Calculus): OrderedSet(InputsArgs) = arg.expressions
-> select(e | e.oclIsKindOf(Expression))
-> select(e | e.oclIsKindOf(InputsArgs))
-> collect(e | e.oclAsType(InputsArgs)) 
-> asOrderedSet()
/]

[query public getExpressions(arg : Calculus): OrderedSet(Expression) = arg.expressions
-> select(e | e.oclIsKindOf(Expression))
-> collect(e | e.oclAsType(Expression)) 
-> asOrderedSet()
/]


