/**
 * generated by Xtext 2.32.0
 */
package fr.n7.cHAISEMINUTETEXT.impl;

import fr.n7.cHAISEMINUTETEXT.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CHAISEMINUTETEXTFactoryImpl extends EFactoryImpl implements CHAISEMINUTETEXTFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CHAISEMINUTETEXTFactory init()
  {
    try
    {
      CHAISEMINUTETEXTFactory theCHAISEMINUTETEXTFactory = (CHAISEMINUTETEXTFactory)EPackage.Registry.INSTANCE.getEFactory(CHAISEMINUTETEXTPackage.eNS_URI);
      if (theCHAISEMINUTETEXTFactory != null)
      {
        return theCHAISEMINUTETEXTFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CHAISEMINUTETEXTFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CHAISEMINUTETEXTFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CHAISEMINUTETEXTPackage.CHAISE_MINUTE: return createChaiseMinute();
      case CHAISEMINUTETEXTPackage.TABLE: return createTable();
      case CHAISEMINUTETEXTPackage.INDEX_COLUMN: return createIndexColumn();
      case CHAISEMINUTETEXTPackage.COLUMN: return createColumn();
      case CHAISEMINUTETEXTPackage.COLUMN_DATA: return createColumnData();
      case CHAISEMINUTETEXTPackage.COMPUTED_COLUMN: return createComputedColumn();
      case CHAISEMINUTETEXTPackage.IMPORTED_COLUMN: return createImportedColumn();
      case CHAISEMINUTETEXTPackage.ALGORITHM: return createAlgorithm();
      case CHAISEMINUTETEXTPackage.FUNCTION: return createFunction();
      case CHAISEMINUTETEXTPackage.ARGUMENT: return createArgument();
      case CHAISEMINUTETEXTPackage.COLUMN_ARGUMENT: return createColumnArgument();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CHAISEMINUTETEXTPackage.DATA_TYPE:
        return createDataTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CHAISEMINUTETEXTPackage.DATA_TYPE:
        return convertDataTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChaiseMinute createChaiseMinute()
  {
    ChaiseMinuteImpl chaiseMinute = new ChaiseMinuteImpl();
    return chaiseMinute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexColumn createIndexColumn()
  {
    IndexColumnImpl indexColumn = new IndexColumnImpl();
    return indexColumn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Column createColumn()
  {
    ColumnImpl column = new ColumnImpl();
    return column;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColumnData createColumnData()
  {
    ColumnDataImpl columnData = new ColumnDataImpl();
    return columnData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComputedColumn createComputedColumn()
  {
    ComputedColumnImpl computedColumn = new ComputedColumnImpl();
    return computedColumn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImportedColumn createImportedColumn()
  {
    ImportedColumnImpl importedColumn = new ImportedColumnImpl();
    return importedColumn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Algorithm createAlgorithm()
  {
    AlgorithmImpl algorithm = new AlgorithmImpl();
    return algorithm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Argument createArgument()
  {
    ArgumentImpl argument = new ArgumentImpl();
    return argument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColumnArgument createColumnArgument()
  {
    ColumnArgumentImpl columnArgument = new ColumnArgumentImpl();
    return columnArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType createDataTypeFromString(EDataType eDataType, String initialValue)
  {
    DataType result = DataType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CHAISEMINUTETEXTPackage getCHAISEMINUTETEXTPackage()
  {
    return (CHAISEMINUTETEXTPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CHAISEMINUTETEXTPackage getPackage()
  {
    return CHAISEMINUTETEXTPackage.eINSTANCE;
  }

} //CHAISEMINUTETEXTFactoryImpl
