/*
 * generated by Xtext 2.32.0
 */
package fr.n7.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CHAISEMINUTETEXTGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ChaiseMinuteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.ChaiseMinute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTablesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTablesTableParserRuleCall_2_0_0 = (RuleCall)cTablesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTablesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTablesTableParserRuleCall_2_1_1_0 = (RuleCall)cTablesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstrainedKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cByKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConstraintsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConstraintsAlgorithmParserRuleCall_4_2_0 = (RuleCall)cConstraintsAssignment_4_2.eContents().get(0);
		
		//ChaiseMinute: name=ID '{'
		//    (tables+=Table ( ','? tables+=Table)* )?
		//    '}'
		//    ('constrained' 'by' constraints=Algorithm)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{'
		//   (tables+=Table ( ','? tables+=Table)* )?
		//   '}'
		//   ('constrained' 'by' constraints=Algorithm)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(tables+=Table ( ','? tables+=Table)* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//tables+=Table
		public Assignment getTablesAssignment_2_0() { return cTablesAssignment_2_0; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_2_0_0() { return cTablesTableParserRuleCall_2_0_0; }
		
		//( ','? tables+=Table)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','?
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//tables+=Table
		public Assignment getTablesAssignment_2_1_1() { return cTablesAssignment_2_1_1; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_2_1_1_0() { return cTablesTableParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//('constrained' 'by' constraints=Algorithm)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'constrained'
		public Keyword getConstrainedKeyword_4_0() { return cConstrainedKeyword_4_0; }
		
		//'by'
		public Keyword getByKeyword_4_1() { return cByKeyword_4_1; }
		
		//constraints=Algorithm
		public Assignment getConstraintsAssignment_4_2() { return cConstraintsAssignment_4_2; }
		
		//Algorithm
		public RuleCall getConstraintsAlgorithmParserRuleCall_4_2_0() { return cConstraintsAlgorithmParserRuleCall_4_2_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIndexedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexcolumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexcolumnIndexColumnParserRuleCall_3_0 = (RuleCall)cIndexcolumnAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cColumnsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cColumnsColumnParserRuleCall_5_0_0 = (RuleCall)cColumnsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cColumnsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_5_1_1_0 = (RuleCall)cColumnsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cConstrainedKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cByKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cConstraintsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cConstraintsAlgorithmParserRuleCall_7_2_0 = (RuleCall)cConstraintsAssignment_7_2.eContents().get(0);
		
		//Table : name=ID 'indexed' 'on' indexcolumn=IndexColumn '('
		//    (columns+=Column ( "," columns+=Column)* )?
		//        ')'
		//    ('constrained' 'by' constraints=Algorithm)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'indexed' 'on' indexcolumn=IndexColumn '('
		//   (columns+=Column ( "," columns+=Column)* )?
		//       ')'
		//   ('constrained' 'by' constraints=Algorithm)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'indexed'
		public Keyword getIndexedKeyword_1() { return cIndexedKeyword_1; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//indexcolumn=IndexColumn
		public Assignment getIndexcolumnAssignment_3() { return cIndexcolumnAssignment_3; }
		
		//IndexColumn
		public RuleCall getIndexcolumnIndexColumnParserRuleCall_3_0() { return cIndexcolumnIndexColumnParserRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(columns+=Column ( "," columns+=Column)* )?
		public Group getGroup_5() { return cGroup_5; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_5_0() { return cColumnsAssignment_5_0; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_5_0_0() { return cColumnsColumnParserRuleCall_5_0_0; }
		
		//( "," columns+=Column)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_5_1_1() { return cColumnsAssignment_5_1_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_5_1_1_0() { return cColumnsColumnParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//('constrained' 'by' constraints=Algorithm)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'constrained'
		public Keyword getConstrainedKeyword_7_0() { return cConstrainedKeyword_7_0; }
		
		//'by'
		public Keyword getByKeyword_7_1() { return cByKeyword_7_1; }
		
		//constraints=Algorithm
		public Assignment getConstraintsAssignment_7_2() { return cConstraintsAssignment_7_2; }
		
		//Algorithm
		public RuleCall getConstraintsAlgorithmParserRuleCall_7_2_0() { return cConstraintsAlgorithmParserRuleCall_7_2_0; }
	}
	public class IndexColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.IndexColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndexColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDataTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//IndexColumn:
		//    {IndexColumn}
		//    id=ID 'of' type=DataType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IndexColumn}
		//id=ID 'of' type=DataType
		public Group getGroup() { return cGroup; }
		
		//{IndexColumn}
		public Action getIndexColumnAction_0() { return cIndexColumnAction_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//type=DataType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_3_0() { return cTypeDataTypeEnumRuleCall_3_0; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.Column");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColumnDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComputedColumnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImportedColumnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Column : ColumnData | ComputedColumn | ImportedColumn
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ColumnData | ComputedColumn | ImportedColumn
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ColumnData
		public RuleCall getColumnDataParserRuleCall_0() { return cColumnDataParserRuleCall_0; }
		
		//ComputedColumn
		public RuleCall getComputedColumnParserRuleCall_1() { return cComputedColumnParserRuleCall_1; }
		
		//ImportedColumn
		public RuleCall getImportedColumnParserRuleCall_2() { return cImportedColumnParserRuleCall_2; }
	}
	public class ColumnDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.ColumnData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ColumnData:id=ID 'of' type=DataType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID 'of' type=DataType
		public Group getGroup() { return cGroup; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_0() { return cTypeDataTypeEnumRuleCall_2_0; }
	}
	public class ComputedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.ComputedColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cComputedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAlgorithmAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAlgorithmAlgorithmParserRuleCall_5_0 = (RuleCall)cAlgorithmAssignment_5.eContents().get(0);
		
		//ComputedColumn:id=ID 'of' type=DataType 'computed' 'with' algorithm=Algorithm
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID 'of' type=DataType 'computed' 'with' algorithm=Algorithm
		public Group getGroup() { return cGroup; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_0() { return cTypeDataTypeEnumRuleCall_2_0; }
		
		//'computed'
		public Keyword getComputedKeyword_3() { return cComputedKeyword_3; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//algorithm=Algorithm
		public Assignment getAlgorithmAssignment_5() { return cAlgorithmAssignment_5; }
		
		//Algorithm
		public RuleCall getAlgorithmAlgorithmParserRuleCall_5_0() { return cAlgorithmAlgorithmParserRuleCall_5_0; }
	}
	public class ImportedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.ImportedColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cImportedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPathAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPathSTRINGTerminalRuleCall_5_0 = (RuleCall)cPathAssignment_5.eContents().get(0);
		
		//ImportedColumn: id=ID 'of' type=DataType 'imported' 'from' path=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID 'of' type=DataType 'imported' 'from' path=STRING
		public Group getGroup() { return cGroup; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_0() { return cTypeDataTypeEnumRuleCall_2_0; }
		
		//'imported'
		public Keyword getImportedKeyword_3() { return cImportedKeyword_3; }
		
		//'from'
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }
		
		//path=STRING
		public Assignment getPathAssignment_5() { return cPathAssignment_5; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_5_0() { return cPathSTRINGTerminalRuleCall_5_0; }
	}
	public class AlgorithmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.Algorithm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlgorithmAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_2_0 = (RuleCall)cFunctionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_3_1_0 = (RuleCall)cFunctionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Algorithm:
		//    {Algorithm}
		//    '['
		//    functions+=Function ('>' functions+=Function)?
		//    ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Algorithm}
		//'['
		//functions+=Function ('>' functions+=Function)?
		//']'
		public Group getGroup() { return cGroup; }
		
		//{Algorithm}
		public Action getAlgorithmAction_0() { return cAlgorithmAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_2() { return cFunctionsAssignment_2; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_2_0() { return cFunctionsFunctionParserRuleCall_2_0; }
		
		//('>' functions+=Function)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_0() { return cGreaterThanSignKeyword_3_0; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_3_1() { return cFunctionsAssignment_3_1; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_3_1_0() { return cFunctionsFunctionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInputsArgumentParserRuleCall_3_0_0 = (RuleCall)cInputsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInputsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInputsArgumentParserRuleCall_3_1_1_0 = (RuleCall)cInputsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Function:
		//    {Function}
		//     name=ID '('
		//    (inputs+=Argument ( "," inputs+=Argument)*)?
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Function}
		// name=ID '('
		//(inputs+=Argument ( "," inputs+=Argument)*)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(inputs+=Argument ( "," inputs+=Argument)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//inputs+=Argument
		public Assignment getInputsAssignment_3_0() { return cInputsAssignment_3_0; }
		
		//Argument
		public RuleCall getInputsArgumentParserRuleCall_3_0_0() { return cInputsArgumentParserRuleCall_3_0_0; }
		
		//( "," inputs+=Argument)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//inputs+=Argument
		public Assignment getInputsAssignment_3_1_1() { return cInputsAssignment_3_1_1; }
		
		//Argument
		public RuleCall getInputsArgumentParserRuleCall_3_1_1_0() { return cInputsArgumentParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.Argument");
		private final RuleCall cColumnArgumentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Argument : ColumnArgument
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ColumnArgument
		public RuleCall getColumnArgumentParserRuleCall() { return cColumnArgumentParserRuleCall; }
	}
	public class ColumnArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.ColumnArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cColumnpathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnpathSTRINGTerminalRuleCall_1_0 = (RuleCall)cColumnpathAssignment_1.eContents().get(0);
		
		//ColumnArgument :
		//    {ColumnArgument}
		//     columnpath=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ColumnArgument}
		// columnpath=STRING
		public Group getGroup() { return cGroup; }
		
		//{ColumnArgument}
		public Action getColumnArgumentAction_0() { return cColumnArgumentAction_0; }
		
		//columnpath=STRING
		public Assignment getColumnpathAssignment_1() { return cColumnpathAssignment_1; }
		
		//STRING
		public RuleCall getColumnpathSTRINGTerminalRuleCall_1_0() { return cColumnpathSTRINGTerminalRuleCall_1_0; }
	}
	
	public class DataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CHAISEMINUTETEXT.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DataType:
		//    String='string'
		//    |Int ='int'
		//;
		public EnumRule getRule() { return rule; }
		
		//String='string'
		//|Int ='int'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//String='string'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'string'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//Int ='int'
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }
		
		//'int'
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
	}
	
	private final ChaiseMinuteElements pChaiseMinute;
	private final TableElements pTable;
	private final IndexColumnElements pIndexColumn;
	private final ColumnElements pColumn;
	private final ColumnDataElements pColumnData;
	private final ComputedColumnElements pComputedColumn;
	private final ImportedColumnElements pImportedColumn;
	private final DataTypeElements eDataType;
	private final AlgorithmElements pAlgorithm;
	private final FunctionElements pFunction;
	private final ArgumentElements pArgument;
	private final ColumnArgumentElements pColumnArgument;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CHAISEMINUTETEXTGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pChaiseMinute = new ChaiseMinuteElements();
		this.pTable = new TableElements();
		this.pIndexColumn = new IndexColumnElements();
		this.pColumn = new ColumnElements();
		this.pColumnData = new ColumnDataElements();
		this.pComputedColumn = new ComputedColumnElements();
		this.pImportedColumn = new ImportedColumnElements();
		this.eDataType = new DataTypeElements();
		this.pAlgorithm = new AlgorithmElements();
		this.pFunction = new FunctionElements();
		this.pArgument = new ArgumentElements();
		this.pColumnArgument = new ColumnArgumentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.CHAISEMINUTETEXT".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ChaiseMinute: name=ID '{'
	//    (tables+=Table ( ','? tables+=Table)* )?
	//    '}'
	//    ('constrained' 'by' constraints=Algorithm)?
	//;
	public ChaiseMinuteElements getChaiseMinuteAccess() {
		return pChaiseMinute;
	}
	
	public ParserRule getChaiseMinuteRule() {
		return getChaiseMinuteAccess().getRule();
	}
	
	//Table : name=ID 'indexed' 'on' indexcolumn=IndexColumn '('
	//    (columns+=Column ( "," columns+=Column)* )?
	//        ')'
	//    ('constrained' 'by' constraints=Algorithm)?
	//;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//IndexColumn:
	//    {IndexColumn}
	//    id=ID 'of' type=DataType
	//;
	public IndexColumnElements getIndexColumnAccess() {
		return pIndexColumn;
	}
	
	public ParserRule getIndexColumnRule() {
		return getIndexColumnAccess().getRule();
	}
	
	//Column : ColumnData | ComputedColumn | ImportedColumn
	//;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//ColumnData:id=ID 'of' type=DataType
	//;
	public ColumnDataElements getColumnDataAccess() {
		return pColumnData;
	}
	
	public ParserRule getColumnDataRule() {
		return getColumnDataAccess().getRule();
	}
	
	//ComputedColumn:id=ID 'of' type=DataType 'computed' 'with' algorithm=Algorithm
	//;
	public ComputedColumnElements getComputedColumnAccess() {
		return pComputedColumn;
	}
	
	public ParserRule getComputedColumnRule() {
		return getComputedColumnAccess().getRule();
	}
	
	//ImportedColumn: id=ID 'of' type=DataType 'imported' 'from' path=STRING
	//;
	public ImportedColumnElements getImportedColumnAccess() {
		return pImportedColumn;
	}
	
	public ParserRule getImportedColumnRule() {
		return getImportedColumnAccess().getRule();
	}
	
	//enum DataType:
	//    String='string'
	//    |Int ='int'
	//;
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Algorithm:
	//    {Algorithm}
	//    '['
	//    functions+=Function ('>' functions+=Function)?
	//    ']'
	//;
	public AlgorithmElements getAlgorithmAccess() {
		return pAlgorithm;
	}
	
	public ParserRule getAlgorithmRule() {
		return getAlgorithmAccess().getRule();
	}
	
	//Function:
	//    {Function}
	//     name=ID '('
	//    (inputs+=Argument ( "," inputs+=Argument)*)?
	//    ')'
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Argument : ColumnArgument
	//;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//ColumnArgument :
	//    {ColumnArgument}
	//     columnpath=STRING
	//;
	public ColumnArgumentElements getColumnArgumentAccess() {
		return pColumnArgument;
	}
	
	public ParserRule getColumnArgumentRule() {
		return getColumnArgumentAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
