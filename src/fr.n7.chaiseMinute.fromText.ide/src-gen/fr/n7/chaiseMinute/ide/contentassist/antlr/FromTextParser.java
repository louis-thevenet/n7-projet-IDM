/*
 * generated by Xtext 2.32.0
 */
package fr.n7.chaiseMinute.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.n7.chaiseMinute.ide.contentassist.antlr.internal.InternalFromTextParser;
import fr.n7.chaiseMinute.services.FromTextGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class FromTextParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FromTextGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FromTextGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getColumnAccess().getAlternatives(), "rule__Column__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getChaiseMinuteAccess().getGroup(), "rule__ChaiseMinute__Group__0");
			builder.put(grammarAccess.getChaiseMinuteAccess().getGroup_1(), "rule__ChaiseMinute__Group_1__0");
			builder.put(grammarAccess.getChaiseMinuteAccess().getGroup_1_1(), "rule__ChaiseMinute__Group_1_1__0");
			builder.put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
			builder.put(grammarAccess.getTableAccess().getGroup_5(), "rule__Table__Group_5__0");
			builder.put(grammarAccess.getTableAccess().getGroup_5_1(), "rule__Table__Group_5_1__0");
			builder.put(grammarAccess.getColumnDataAccess().getGroup(), "rule__ColumnData__Group__0");
			builder.put(grammarAccess.getImportedColumnAccess().getGroup(), "rule__ImportedColumn__Group__0");
			builder.put(grammarAccess.getComputedColumnAccess().getGroup(), "rule__ComputedColumn__Group__0");
			builder.put(grammarAccess.getColumnArgumentAccess().getGroup(), "rule__ColumnArgument__Group__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup(), "rule__Algorithm__Group__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup_3(), "rule__Algorithm__Group_3__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup_3_1(), "rule__Algorithm__Group_3_1__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup_5(), "rule__Algorithm__Group_5__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup_5_3(), "rule__Algorithm__Group_5_3__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup_5_3_1(), "rule__Algorithm__Group_5_3_1__0");
			builder.put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
			builder.put(grammarAccess.getFeurAccess().getGroup(), "rule__Feur__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getChaiseMinuteAccess().getTablesAssignment_1_0(), "rule__ChaiseMinute__TablesAssignment_1_0");
			builder.put(grammarAccess.getChaiseMinuteAccess().getTablesAssignment_1_1_1(), "rule__ChaiseMinute__TablesAssignment_1_1_1");
			builder.put(grammarAccess.getTableAccess().getNameAssignment_1(), "rule__Table__NameAssignment_1");
			builder.put(grammarAccess.getTableAccess().getIndexColumnAssignment_3(), "rule__Table__IndexColumnAssignment_3");
			builder.put(grammarAccess.getTableAccess().getColumnsAssignment_5_0(), "rule__Table__ColumnsAssignment_5_0");
			builder.put(grammarAccess.getTableAccess().getColumnsAssignment_5_1_1(), "rule__Table__ColumnsAssignment_5_1_1");
			builder.put(grammarAccess.getColumnDataAccess().getTypeAssignment_2(), "rule__ColumnData__TypeAssignment_2");
			builder.put(grammarAccess.getColumnDataAccess().getIdAssignment_5(), "rule__ColumnData__IdAssignment_5");
			builder.put(grammarAccess.getImportedColumnAccess().getTypeAssignment_2(), "rule__ImportedColumn__TypeAssignment_2");
			builder.put(grammarAccess.getImportedColumnAccess().getPathAssignment_5(), "rule__ImportedColumn__PathAssignment_5");
			builder.put(grammarAccess.getImportedColumnAccess().getIdAssignment_7(), "rule__ImportedColumn__IdAssignment_7");
			builder.put(grammarAccess.getComputedColumnAccess().getTypeAssignment_2(), "rule__ComputedColumn__TypeAssignment_2");
			builder.put(grammarAccess.getComputedColumnAccess().getAlgorithmAssignment_5(), "rule__ComputedColumn__AlgorithmAssignment_5");
			builder.put(grammarAccess.getComputedColumnAccess().getIdAssignment_7(), "rule__ComputedColumn__IdAssignment_7");
			builder.put(grammarAccess.getColumnArgumentAccess().getColumnPathAssignment_1(), "rule__ColumnArgument__ColumnPathAssignment_1");
			builder.put(grammarAccess.getAlgorithmAccess().getFunctionsAssignment_1(), "rule__Algorithm__FunctionsAssignment_1");
			builder.put(grammarAccess.getAlgorithmAccess().getInputsAssignment_3_0(), "rule__Algorithm__InputsAssignment_3_0");
			builder.put(grammarAccess.getAlgorithmAccess().getInputsAssignment_3_1_1(), "rule__Algorithm__InputsAssignment_3_1_1");
			builder.put(grammarAccess.getAlgorithmAccess().getFunctionsAssignment_5_1(), "rule__Algorithm__FunctionsAssignment_5_1");
			builder.put(grammarAccess.getAlgorithmAccess().getInputsAssignment_5_3_0(), "rule__Algorithm__InputsAssignment_5_3_0");
			builder.put(grammarAccess.getAlgorithmAccess().getInputsAssignment_5_3_1_1(), "rule__Algorithm__InputsAssignment_5_3_1_1");
			builder.put(grammarAccess.getFunctionAccess().getOperationAssignment_1(), "rule__Function__OperationAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FromTextGrammarAccess grammarAccess;

	@Override
	protected InternalFromTextParser createParser() {
		InternalFromTextParser result = new InternalFromTextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FromTextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FromTextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
