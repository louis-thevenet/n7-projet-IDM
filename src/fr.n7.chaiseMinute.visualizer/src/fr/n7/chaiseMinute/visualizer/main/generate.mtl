[comment encoding = UTF-8 /]
[module generate('http://chaiseMinute', 'http://function', 'http://algorithm')]

[template public generateElement(aChaiseMinute : ChaiseMinute)]
[comment @main/]
[file ((aChaiseMinute.name)+'_visualizer.py', false, 'UTF-8')]
import sys
import numpy
import pandas as pd
import tkinter as tk
from tkinter import ttk, filedialog

def search(input, out, table, id):
	try:
		return input['['/]table]['['/]id].to_list()
	except Exception:
		return out['['/]id].to_list()
 
def load(files):
	"""Load all tables as CSV files. All tables must have a corresponding CSV file with the same name in working dir."""
	input = {}	
	for filename in files:
		name = filename.rsplit(".",1)['['/]0]
		input['['/]name] = pd.read_csv(filename)

	return input

def check_constraints(input):
	"""Ensure all contraints are respected in input and output data"""
	################################
	# Verifying Input Constraints
	################################
	[for (a : Algorithm |  aChaiseMinute.constraints)]
		[for (f : Function | a.functions)]
	### Apply [f.name/] ##
	from [f.name/] import [f.name/]
				[let functionNo :Integer= i]
	res = [f.name/](
	[if (functionNo >=2)]
		res, # Previous result used in next function
	[/if]
					[for (input : Argument | f.inputs)]	
					[if input.oclIsTypeOf(ColumnArgument)]
						[let table:String = input.oclAsType(ColumnArgument).columnPath.replaceAll('\\..*', '')]
						[let id:String = input.oclAsType(ColumnArgument).columnPath.replaceFirst('.*\\.', '')]
		input['['/]"[table/]"]['['/]"[id/]"].to_list(),
						[/let][/let]
					[/if]			
					[/for]
				[/let]
	)
		[/for]

		

	if not res:
		return (False,("[aChaiseMinute.constraints.getLastFunction().name/] constraints failed"))
	[/for]

	################################
	# Verifying Table Constraints
	################################
	out = generate_output(input)

	[for (t : Table | aChaiseMinute.getTables())]
	### Verify data types
		[for (c: Column | t.columns)]
			[let type : DataType = c.type]
	for x in out['['/]"[t.name/]"]['['/]"[c.id/]"]:
		[if type = DataType::Float]
		if (type(x)!=float and type(x)!=numpy.float64):
			return (False, "Type constraints failed on [t.name/].[c.id/]")
	
		[elseif type = DataType::Int]
		if (type(x)!=int and type(x)!=numpy.int64):
			return (False, "Type constraints failed on [t.name/].[c.id/]")

		[elseif type = DataType::Boolean]
		if (x !=0 and x != 1):
			return (False, "Type constraints failed on [t.name/].[c.id/]")
		[else]
		break
		[/if]

			[/let]
		[/for]

		[for (a : Algorithm |  t.constraints)]
			[for (f : Function | a.functions)]
	### Apply [f.name/] ##
	from [f.name/] import [f.name/]
					[let functionNo :Integer= i]
	res = [f.name/](
						[for (input : Argument | f.inputs)]
						[if (functionNo >=2)]
		res, # Previous result used in next function
						[/if]
						[if input.oclIsTypeOf(ColumnArgument)]
							[let table:String = input.oclAsType(ColumnArgument).columnPath.replaceAll('\\..*', '')]
							[let id:String = input.oclAsType(ColumnArgument).columnPath.replaceFirst('.*\\.', '')]
		search(input, out, "[table/]", "[id/]"),
							[/let][/let]
						[/if]			
						[/for]
					[/let]
	)

	if not res:
		return (False, "[f.name/] constraints failed on [t.name/]")
			[/for]
		[/for]
	[/for]
	return (True, "Constraints are respected")

def generate_output(input):
	"""Returns a Dict<TableName, Dict<ColumnName, Data>> by applying the the model on the input data."""
	tables = {}
[for (t : Table | aChaiseMinute.getTables())]
[t.generateElement()/]
[/for]
	return tables

def save_to_csv(tables):
	"""Saves each table from he input argument as a CSV file."""
[for (t : Table | aChaiseMinute.getTables())]
	
	################################
	# Saving to "output_[t.name/].csv" 
	################################
	pd.DataFrame.from_dict(tables['['/]"[t.name/]"], orient="columns").to_csv("output_"+"[t.name/]"+".csv", index_label="[t.indexColumn.id/]")
[/for]



class TableViewer(tk.Tk):
    def __init__(self, tables):
        super().__init__()

        self.title("Table Viewer")
        self.geometry("1500x800")

        self.tables = tables
        self.current_table = None

        self.left_frame = tk.Frame(self)
        self.left_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nswe")

        self.table_listbox = tk.Listbox(self.left_frame, height=20)
        self.table_listbox.pack(fill=tk.Y, padx=10)
        self.table_listbox.bind("<<ListboxSelect>>", self.on_table_select)

        self.populate_table_list()

        self.right_frame = tk.Frame(self)
        self.right_frame.grid(row=0, column=1, padx=10, pady=10, sticky="nswe")

        self.treeview = ttk.Treeview(self.right_frame)
        self.treeview.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.grid_columnconfigure(0, weight=1, uniform="equal")
        self.grid_columnconfigure(1, weight=3, uniform="equal")

    def populate_table_list(self):
        """Populate the listbox with the table names."""
        for table_name in self.tables:
            self.table_listbox.insert(tk.END, table_name)

    def on_table_select(self, event):
        """Handle table selection from the listbox."""
        selected_index = self.table_listbox.curselection()
        if not selected_index:
            return

        table_name = self.table_listbox.get(selected_index)
        self.display_table(table_name)

    def display_table(self, table_name):
        """Display selected table in the Treeview."""
        table = self.tables['['/]table_name]

        for item in self.treeview.get_children():
            self.treeview.delete(item)

        columns = list(table.keys())
        self.treeview['['/]"columns"] = columns
        self.treeview['['/]"show"] = "headings"

        num_rows = 0
        for col in columns:
            self.treeview.heading(col, text=col)
            if num_rows < len(table['['/]col]):
                num_rows = len(table['['/]col])

        for i in range(num_rows):
            row = ['['/]table['['/]col]['['/]i] for col in columns]
            self.treeview.insert("", tk.END, values=row)



def main():
	tables_data = load(sys.argv['['/]1:])
	res, msg = check_constraints(tables_data)
	if not res:
		print(msg)
		return 
	
	tables_data = generate_output(tables_data)
	app = TableViewer(tables_data)
	app.mainloop()

if __name__ == '__main__':
	main()

[/file]
[/template]
[query public getLastFunction(arg : Algorithm) :Function = arg.functions -> last()/]
[query public getTable(arg : ChaiseMinute, name: String) : Table = arg.tables 
-> select(e | e.oclIsTypeOf(Table) and e.name = name)
-> collect(e | e.oclAsType(Table)) 
/]
[query public getTables(arg : ChaiseMinute): OrderedSet(Table) = arg.tables 
-> select(e | e.oclIsTypeOf(Table))
-> collect(e | e.oclAsType(Table)) 
-> asOrderedSet()
/]

[template public generateElement(aTable: Table)]
	out = {}
	###########################################################################
	# Table: [aTable.name/]
	###########################################################################
	[for (c: Column | aTable.columns)]
		[if (c.oclIsKindOf(ColumnData))]
	################################
	## Data column: [c.id/] 
	################################
	out['['/]"[c.id/]"]=input['['/]"[aTable.name/]"]['['/]"[c.id/]"]

		[elseif (c.oclIsTypeOf(ImportedColumn))]
			[let table:String = c.oclAsType(ImportedColumn).path.replaceAll('\\..*', '')]
			[let id:String = c.oclAsType(ImportedColumn).path.replaceFirst('.*\\.', '')]
	### Imported column: [c.id/] from [c.oclAsType(ImportedColumn).path/] ###
	out['['/]"[c.id/]"]=input['['/]"[table/]"]['['/]"[id/]"]

			[/let]
			[/let]
		[else]
		[/if]
	[/for]
	[for (c: Column | aTable.columns)]
		[if (c.oclIsKindOf(ComputedColumn))]
	################################			
	## Computed column: [c.id/] 
	################################
			[for (f : Function | c.oclAsType(ComputedColumn).algorithm.functions) ]
	### Apply [f.name/] ##
	from [f.name/] import [f.name/]
				[let functionNo :Integer= i]
	out['['/]"[c.id/]"] = [f.name/](
					[for (input : Argument | f.inputs)]
					[if (functionNo >=2)]
		out['['/]"[c.id/]"], # Previous result used in next function
					[/if]
					[if input.oclIsTypeOf(ColumnArgument)]
						[let table:String = input.oclAsType(ColumnArgument).columnPath.replaceAll('\\..*', '')]
						[let id:String = input.oclAsType(ColumnArgument).columnPath.replaceFirst('.*\\.', '')]
		search(input, out, "[table/]", "[id/]"),
						[/let][/let]
					[/if]			
					[/for]
				[/let]
	)
	###############
			[/for]
		[/if]
	[/for]
	tables['['/]"[aTable.name/]"] = out

[/template]




