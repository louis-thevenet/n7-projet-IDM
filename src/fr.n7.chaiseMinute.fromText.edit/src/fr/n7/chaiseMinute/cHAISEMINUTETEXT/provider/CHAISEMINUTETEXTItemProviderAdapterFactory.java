/**
 * generated by Xtext 2.32.0
 */
package fr.n7.chaiseMinute.cHAISEMINUTETEXT.provider;

import fr.n7.chaiseMinute.cHAISEMINUTETEXT.util.CHAISEMINUTETEXTAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CHAISEMINUTETEXTItemProviderAdapterFactory extends CHAISEMINUTETEXTAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CHAISEMINUTETEXTItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.ChaiseMinute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChaiseMinuteItemProvider chaiseMinuteItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.ChaiseMinute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChaiseMinuteAdapter() {
		if (chaiseMinuteItemProvider == null) {
			chaiseMinuteItemProvider = new ChaiseMinuteItemProvider(this);
		}

		return chaiseMinuteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.IndexColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexColumnItemProvider indexColumnItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.IndexColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexColumnAdapter() {
		if (indexColumnItemProvider == null) {
			indexColumnItemProvider = new IndexColumnItemProvider(this);
		}

		return indexColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.ColumnData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnDataItemProvider columnDataItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.ColumnData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnDataAdapter() {
		if (columnDataItemProvider == null) {
			columnDataItemProvider = new ColumnDataItemProvider(this);
		}

		return columnDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.ComputedColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputedColumnItemProvider computedColumnItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.ComputedColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputedColumnAdapter() {
		if (computedColumnItemProvider == null) {
			computedColumnItemProvider = new ComputedColumnItemProvider(this);
		}

		return computedColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.ImportedColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportedColumnItemProvider importedColumnItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.ImportedColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportedColumnAdapter() {
		if (importedColumnItemProvider == null) {
			importedColumnItemProvider = new ImportedColumnItemProvider(this);
		}

		return importedColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.Algorithm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlgorithmItemProvider algorithmItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.Algorithm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlgorithmAdapter() {
		if (algorithmItemProvider == null) {
			algorithmItemProvider = new AlgorithmItemProvider(this);
		}

		return algorithmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.Argument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentItemProvider argumentItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.Argument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentAdapter() {
		if (argumentItemProvider == null) {
			argumentItemProvider = new ArgumentItemProvider(this);
		}

		return argumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.ColumnArgument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnArgumentItemProvider columnArgumentItemProvider;

	/**
	 * This creates an adapter for a {@link fr.n7.chaiseMinute.cHAISEMINUTETEXT.ColumnArgument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnArgumentAdapter() {
		if (columnArgumentItemProvider == null) {
			columnArgumentItemProvider = new ColumnArgumentItemProvider(this);
		}

		return columnArgumentItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (chaiseMinuteItemProvider != null) chaiseMinuteItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (indexColumnItemProvider != null) indexColumnItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (columnDataItemProvider != null) columnDataItemProvider.dispose();
		if (computedColumnItemProvider != null) computedColumnItemProvider.dispose();
		if (importedColumnItemProvider != null) importedColumnItemProvider.dispose();
		if (algorithmItemProvider != null) algorithmItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (argumentItemProvider != null) argumentItemProvider.dispose();
		if (columnArgumentItemProvider != null) columnArgumentItemProvider.dispose();
	}

}
