/*
 * generated by Xtext 2.32.0
 */
package fr.n7.chaiseMinute.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FromTextGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ChaiseMinuteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.ChaiseMinute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTablesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTablesTableParserRuleCall_1_0_0 = (RuleCall)cTablesAssignment_1_0.eContents().get(0);
		private final Assignment cTablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTablesTableParserRuleCall_1_1_0 = (RuleCall)cTablesAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ChaiseMinute returns ChaiseMinute:
		//    '{'
		//        (tables+=Table ( tables+=Table)* )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//    (tables+=Table ( tables+=Table)* )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(tables+=Table ( tables+=Table)* )?
		public Group getGroup_1() { return cGroup_1; }
		
		//tables+=Table
		public Assignment getTablesAssignment_1_0() { return cTablesAssignment_1_0; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_1_0_0() { return cTablesTableParserRuleCall_1_0_0; }
		
		//( tables+=Table)*
		public Assignment getTablesAssignment_1_1() { return cTablesAssignment_1_1; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_1_1_0() { return cTablesTableParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexColumnIndexColumnParserRuleCall_3_0 = (RuleCall)cIndexColumnAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cColumnsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cColumnsColumnParserRuleCall_5_0_0 = (RuleCall)cColumnsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cColumnsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_5_1_1_0 = (RuleCall)cColumnsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Table returns Table:
		//    '{'
		//    name=EString ','
		//    indexColumn=IndexColumn ','
		//    (columns+=Column ( "," columns+=Column)* )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//name=EString ','
		//indexColumn=IndexColumn ','
		//(columns+=Column ( "," columns+=Column)* )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//indexColumn=IndexColumn
		public Assignment getIndexColumnAssignment_3() { return cIndexColumnAssignment_3; }
		
		//IndexColumn
		public RuleCall getIndexColumnIndexColumnParserRuleCall_3_0() { return cIndexColumnIndexColumnParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//(columns+=Column ( "," columns+=Column)* )?
		public Group getGroup_5() { return cGroup_5; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_5_0() { return cColumnsAssignment_5_0; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_5_0_0() { return cColumnsColumnParserRuleCall_5_0_0; }
		
		//( "," columns+=Column)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_5_1_1() { return cColumnsAssignment_5_1_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_5_1_1_0() { return cColumnsColumnParserRuleCall_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class IndexColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.IndexColumn");
		private final Action cIndexColumnAction = (Action)rule.eContents().get(1);
		
		//IndexColumn returns IndexColumn:
		//    {IndexColumn}
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{IndexColumn}
		public Action getIndexColumnAction() { return cIndexColumnAction; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.Column");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColumnDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComputedColumnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImportedColumnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Column returns Column:
		//    ColumnData | ComputedColumn | ImportedColumn;
		@Override public ParserRule getRule() { return rule; }
		
		//ColumnData | ComputedColumn | ImportedColumn
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ColumnData
		public RuleCall getColumnDataParserRuleCall_0() { return cColumnDataParserRuleCall_0; }
		
		//ComputedColumn
		public RuleCall getComputedColumnParserRuleCall_1() { return cComputedColumnParserRuleCall_1; }
		
		//ImportedColumn
		public RuleCall getImportedColumnParserRuleCall_2() { return cImportedColumnParserRuleCall_2; }
	}
	public class ColumnDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.ColumnData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdEStringParserRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		
		//ColumnData returns ColumnData:
		//    'data' '(' type=DataType ')' ':' id=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'data' '(' type=DataType ')' ':' id=EString
		public Group getGroup() { return cGroup; }
		
		//'data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_0() { return cTypeDataTypeEnumRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//id=EString
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_5_0() { return cIdEStringParserRuleCall_5_0; }
	}
	public class ImportedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.ImportedColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPathAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPathEStringParserRuleCall_5_0 = (RuleCall)cPathAssignment_5.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIdAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIdEStringParserRuleCall_7_0 = (RuleCall)cIdAssignment_7.eContents().get(0);
		
		//ImportedColumn returns ImportedColumn:
		//    'imported' '(' type=DataType ')' ':'
		//        path=EString
		//        '->'
		//    id=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'imported' '(' type=DataType ')' ':'
		//    path=EString
		//    '->'
		//id=EString
		public Group getGroup() { return cGroup; }
		
		//'imported'
		public Keyword getImportedKeyword_0() { return cImportedKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_0() { return cTypeDataTypeEnumRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//path=EString
		public Assignment getPathAssignment_5() { return cPathAssignment_5; }
		
		//EString
		public RuleCall getPathEStringParserRuleCall_5_0() { return cPathEStringParserRuleCall_5_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }
		
		//id=EString
		public Assignment getIdAssignment_7() { return cIdAssignment_7; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_7_0() { return cIdEStringParserRuleCall_7_0; }
	}
	public class ComputedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.ComputedColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComputedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cFunctionAlgorithmCrossReference_5_0 = (CrossReference)cFunctionAssignment_5.eContents().get(0);
		private final RuleCall cFunctionAlgorithmEStringParserRuleCall_5_0_1 = (RuleCall)cFunctionAlgorithmCrossReference_5_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIdAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIdEStringParserRuleCall_7_0 = (RuleCall)cIdAssignment_7.eContents().get(0);
		
		//ComputedColumn returns ComputedColumn:
		//    'computed'
		//    '('
		//    type=DataType
		//    ')'
		//    ':'
		//    function=[algorithm::Algorithm|EString]
		//    '->'
		//    id=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'computed'
		//'('
		//type=DataType
		//')'
		//':'
		//function=[algorithm::Algorithm|EString]
		//'->'
		//id=EString
		public Group getGroup() { return cGroup; }
		
		//'computed'
		public Keyword getComputedKeyword_0() { return cComputedKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_0() { return cTypeDataTypeEnumRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//function=[algorithm::Algorithm|EString]
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }
		
		//[algorithm::Algorithm|EString]
		public CrossReference getFunctionAlgorithmCrossReference_5_0() { return cFunctionAlgorithmCrossReference_5_0; }
		
		//EString
		public RuleCall getFunctionAlgorithmEStringParserRuleCall_5_0_1() { return cFunctionAlgorithmEStringParserRuleCall_5_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }
		
		//id=EString
		public Assignment getIdAssignment_7() { return cIdAssignment_7; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_7_0() { return cIdEStringParserRuleCall_7_0; }
	}
	public class ColumnArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.ColumnArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cColumnPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnPathEStringParserRuleCall_1_0 = (RuleCall)cColumnPathAssignment_1.eContents().get(0);
		
		//ColumnArgument returns algorithm::ColumnArgument:
		//    {algorithm::ColumnArgument}
		//    columnPath=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{algorithm::ColumnArgument}
		//columnPath=EString
		public Group getGroup() { return cGroup; }
		
		//{algorithm::ColumnArgument}
		public Action getColumnArgumentAction_0() { return cColumnArgumentAction_0; }
		
		//columnPath=EString
		public Assignment getColumnPathAssignment_1() { return cColumnPathAssignment_1; }
		
		//EString
		public RuleCall getColumnPathEStringParserRuleCall_1_0() { return cColumnPathEStringParserRuleCall_1_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.Argument");
		private final RuleCall cColumnArgumentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Argument returns algorithm::Argument:
		//    ColumnArgument
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//ColumnArgument
		public RuleCall getColumnArgumentParserRuleCall() { return cColumnArgumentParserRuleCall; }
	}
	public class AlgorithmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.Algorithm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputArgumentParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cInputArgumentParserRuleCall_2_0_0 = (RuleCall)cInputAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInputAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInputArgumentParserRuleCall_2_1_1_0 = (RuleCall)cInputAssignment_2_1_1.eContents().get(0);
		private final Assignment cFunctionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctionFunctionParserRuleCall_3_0 = (RuleCall)cFunctionAssignment_3.eContents().get(0);
		
		//Algorithm returns algorithm::Algorithm:
		//input+=Argument ','
		//        (input+=Argument( "," input+=Argument)* )?
		//    function=Function
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//input+=Argument ','
		//        (input+=Argument( "," input+=Argument)* )?
		//    function=Function
		public Group getGroup() { return cGroup; }
		
		//input+=Argument
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//Argument
		public RuleCall getInputArgumentParserRuleCall_0_0() { return cInputArgumentParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//(input+=Argument( "," input+=Argument)* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//input+=Argument
		public Assignment getInputAssignment_2_0() { return cInputAssignment_2_0; }
		
		//Argument
		public RuleCall getInputArgumentParserRuleCall_2_0_0() { return cInputArgumentParserRuleCall_2_0_0; }
		
		//( "," input+=Argument)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//input+=Argument
		public Assignment getInputAssignment_2_1_1() { return cInputAssignment_2_1_1; }
		
		//Argument
		public RuleCall getInputArgumentParserRuleCall_2_1_1_0() { return cInputArgumentParserRuleCall_2_1_1_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_3() { return cFunctionAssignment_3; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_3_0() { return cFunctionFunctionParserRuleCall_3_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.Operation");
		private final RuleCall cSumParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Operation returns algorithm::Operation:
		//    Sum;
		@Override public ParserRule getRule() { return rule; }
		
		//Sum
		public RuleCall getSumParserRuleCall() { return cSumParserRuleCall; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPreviousKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPreviousAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cPreviousFunctionCrossReference_3_1_0 = (CrossReference)cPreviousAssignment_3_1.eContents().get(0);
		private final RuleCall cPreviousFunctionEStringParserRuleCall_3_1_0_1 = (RuleCall)cPreviousFunctionCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNextKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNextAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cNextFunctionCrossReference_4_1_0 = (CrossReference)cNextAssignment_4_1.eContents().get(0);
		private final RuleCall cNextFunctionEStringParserRuleCall_4_1_0_1 = (RuleCall)cNextFunctionCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInputKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cInputAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cInputArgumentCrossReference_5_2_0 = (CrossReference)cInputAssignment_5_2.eContents().get(0);
		private final RuleCall cInputArgumentEStringParserRuleCall_5_2_0_1 = (RuleCall)cInputArgumentCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cInputAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cInputArgumentCrossReference_5_3_1_0 = (CrossReference)cInputAssignment_5_3_1.eContents().get(0);
		private final RuleCall cInputArgumentEStringParserRuleCall_5_3_1_0_1 = (RuleCall)cInputArgumentCrossReference_5_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOperationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOperationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOperationOperationParserRuleCall_6_1_0 = (RuleCall)cOperationAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Function returns algorithm::Function:
		//    {algorithm::Function}
		//    'Function'
		//    '{'
		//        ('previous' previous=[algorithm::Function|EString])?
		//        ('next' next=[algorithm::Function|EString])?
		//        ('input' '(' input+=[algorithm::Argument|EString] ( "," input+=[algorithm::Argument|EString])* ')' )?
		//        ('operation' operation=Operation)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{algorithm::Function}
		//'Function'
		//'{'
		//    ('previous' previous=[algorithm::Function|EString])?
		//    ('next' next=[algorithm::Function|EString])?
		//    ('input' '(' input+=[algorithm::Argument|EString] ( "," input+=[algorithm::Argument|EString])* ')' )?
		//    ('operation' operation=Operation)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{algorithm::Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//'Function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('previous' previous=[algorithm::Function|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'previous'
		public Keyword getPreviousKeyword_3_0() { return cPreviousKeyword_3_0; }
		
		//previous=[algorithm::Function|EString]
		public Assignment getPreviousAssignment_3_1() { return cPreviousAssignment_3_1; }
		
		//[algorithm::Function|EString]
		public CrossReference getPreviousFunctionCrossReference_3_1_0() { return cPreviousFunctionCrossReference_3_1_0; }
		
		//EString
		public RuleCall getPreviousFunctionEStringParserRuleCall_3_1_0_1() { return cPreviousFunctionEStringParserRuleCall_3_1_0_1; }
		
		//('next' next=[algorithm::Function|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'next'
		public Keyword getNextKeyword_4_0() { return cNextKeyword_4_0; }
		
		//next=[algorithm::Function|EString]
		public Assignment getNextAssignment_4_1() { return cNextAssignment_4_1; }
		
		//[algorithm::Function|EString]
		public CrossReference getNextFunctionCrossReference_4_1_0() { return cNextFunctionCrossReference_4_1_0; }
		
		//EString
		public RuleCall getNextFunctionEStringParserRuleCall_4_1_0_1() { return cNextFunctionEStringParserRuleCall_4_1_0_1; }
		
		//('input' '(' input+=[algorithm::Argument|EString] ( "," input+=[algorithm::Argument|EString])* ')' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'input'
		public Keyword getInputKeyword_5_0() { return cInputKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//input+=[algorithm::Argument|EString]
		public Assignment getInputAssignment_5_2() { return cInputAssignment_5_2; }
		
		//[algorithm::Argument|EString]
		public CrossReference getInputArgumentCrossReference_5_2_0() { return cInputArgumentCrossReference_5_2_0; }
		
		//EString
		public RuleCall getInputArgumentEStringParserRuleCall_5_2_0_1() { return cInputArgumentEStringParserRuleCall_5_2_0_1; }
		
		//( "," input+=[algorithm::Argument|EString])*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//input+=[algorithm::Argument|EString]
		public Assignment getInputAssignment_5_3_1() { return cInputAssignment_5_3_1; }
		
		//[algorithm::Argument|EString]
		public CrossReference getInputArgumentCrossReference_5_3_1_0() { return cInputArgumentCrossReference_5_3_1_0; }
		
		//EString
		public RuleCall getInputArgumentEStringParserRuleCall_5_3_1_0_1() { return cInputArgumentEStringParserRuleCall_5_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//('operation' operation=Operation)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'operation'
		public Keyword getOperationKeyword_6_0() { return cOperationKeyword_6_0; }
		
		//operation=Operation
		public Assignment getOperationAssignment_6_1() { return cOperationAssignment_6_1; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_6_1_0() { return cOperationOperationParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSumAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sum returns algorithm::Sum:
		//    {algorithm::Sum}
		//    'Sum'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{algorithm::Sum}
		//'Sum'
		public Group getGroup() { return cGroup; }
		
		//{algorithm::Sum}
		public Action getSumAction_0() { return cSumAction_0; }
		
		//'Sum'
		public Keyword getSumKeyword_1() { return cSumKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class DataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.chaiseMinute.FromText.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DataType returns DataType:
		//                String = 'String' | Int = 'Int';
		public EnumRule getRule() { return rule; }
		
		//String = 'String' | Int = 'Int'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//String = 'String'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//Int = 'Int'
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }
		
		//'Int'
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
	}
	
	private final ChaiseMinuteElements pChaiseMinute;
	private final TableElements pTable;
	private final IndexColumnElements pIndexColumn;
	private final ColumnElements pColumn;
	private final DataTypeElements eDataType;
	private final ColumnDataElements pColumnData;
	private final ImportedColumnElements pImportedColumn;
	private final ComputedColumnElements pComputedColumn;
	private final ColumnArgumentElements pColumnArgument;
	private final ArgumentElements pArgument;
	private final AlgorithmElements pAlgorithm;
	private final OperationElements pOperation;
	private final EStringElements pEString;
	private final FunctionElements pFunction;
	private final SumElements pSum;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FromTextGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pChaiseMinute = new ChaiseMinuteElements();
		this.pTable = new TableElements();
		this.pIndexColumn = new IndexColumnElements();
		this.pColumn = new ColumnElements();
		this.eDataType = new DataTypeElements();
		this.pColumnData = new ColumnDataElements();
		this.pImportedColumn = new ImportedColumnElements();
		this.pComputedColumn = new ComputedColumnElements();
		this.pColumnArgument = new ColumnArgumentElements();
		this.pArgument = new ArgumentElements();
		this.pAlgorithm = new AlgorithmElements();
		this.pOperation = new OperationElements();
		this.pEString = new EStringElements();
		this.pFunction = new FunctionElements();
		this.pSum = new SumElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.chaiseMinute.FromText".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ChaiseMinute returns ChaiseMinute:
	//    '{'
	//        (tables+=Table ( tables+=Table)* )?
	//    '}';
	public ChaiseMinuteElements getChaiseMinuteAccess() {
		return pChaiseMinute;
	}
	
	public ParserRule getChaiseMinuteRule() {
		return getChaiseMinuteAccess().getRule();
	}
	
	//Table returns Table:
	//    '{'
	//    name=EString ','
	//    indexColumn=IndexColumn ','
	//    (columns+=Column ( "," columns+=Column)* )?
	//    '}';
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//IndexColumn returns IndexColumn:
	//    {IndexColumn}
	//    ;
	public IndexColumnElements getIndexColumnAccess() {
		return pIndexColumn;
	}
	
	public ParserRule getIndexColumnRule() {
		return getIndexColumnAccess().getRule();
	}
	
	//Column returns Column:
	//    ColumnData | ComputedColumn | ImportedColumn;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//enum DataType returns DataType:
	//                String = 'String' | Int = 'Int';
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//ColumnData returns ColumnData:
	//    'data' '(' type=DataType ')' ':' id=EString
	//    ;
	public ColumnDataElements getColumnDataAccess() {
		return pColumnData;
	}
	
	public ParserRule getColumnDataRule() {
		return getColumnDataAccess().getRule();
	}
	
	//ImportedColumn returns ImportedColumn:
	//    'imported' '(' type=DataType ')' ':'
	//        path=EString
	//        '->'
	//    id=EString
	//    ;
	public ImportedColumnElements getImportedColumnAccess() {
		return pImportedColumn;
	}
	
	public ParserRule getImportedColumnRule() {
		return getImportedColumnAccess().getRule();
	}
	
	//ComputedColumn returns ComputedColumn:
	//    'computed'
	//    '('
	//    type=DataType
	//    ')'
	//    ':'
	//    function=[algorithm::Algorithm|EString]
	//    '->'
	//    id=EString
	//    ;
	public ComputedColumnElements getComputedColumnAccess() {
		return pComputedColumn;
	}
	
	public ParserRule getComputedColumnRule() {
		return getComputedColumnAccess().getRule();
	}
	
	//ColumnArgument returns algorithm::ColumnArgument:
	//    {algorithm::ColumnArgument}
	//    columnPath=EString
	//    ;
	public ColumnArgumentElements getColumnArgumentAccess() {
		return pColumnArgument;
	}
	
	public ParserRule getColumnArgumentRule() {
		return getColumnArgumentAccess().getRule();
	}
	
	//Argument returns algorithm::Argument:
	//    ColumnArgument
	//    ;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//Algorithm returns algorithm::Algorithm:
	//input+=Argument ','
	//        (input+=Argument( "," input+=Argument)* )?
	//    function=Function
	//        ;
	public AlgorithmElements getAlgorithmAccess() {
		return pAlgorithm;
	}
	
	public ParserRule getAlgorithmRule() {
		return getAlgorithmAccess().getRule();
	}
	
	//Operation returns algorithm::Operation:
	//    Sum;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Function returns algorithm::Function:
	//    {algorithm::Function}
	//    'Function'
	//    '{'
	//        ('previous' previous=[algorithm::Function|EString])?
	//        ('next' next=[algorithm::Function|EString])?
	//        ('input' '(' input+=[algorithm::Argument|EString] ( "," input+=[algorithm::Argument|EString])* ')' )?
	//        ('operation' operation=Operation)?
	//    '}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Sum returns algorithm::Sum:
	//    {algorithm::Sum}
	//    'Sum'
	//    ;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
