/**
 * generated by Xtext 2.32.0
 */
package fr.n7.chaiseMinute.formatting2;

import chaiseMinute.ChaiseMinute;
import chaiseMinute.Column;
import chaiseMinute.IndexColumn;
import chaiseMinute.Table;
import com.google.inject.Inject;
import fr.n7.chaiseMinute.services.FromTextGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class FromTextFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private FromTextGrammarAccess _fromTextGrammarAccess;

  protected void _format(final ChaiseMinute chaiseMinute, @Extension final IFormattableDocument document) {
    EList<Table> _tables = chaiseMinute.getTables();
    for (final Table table : _tables) {
      document.<Table>format(table);
    }
  }

  protected void _format(final Table table, @Extension final IFormattableDocument document) {
    EList<Column> _columns = table.getColumns();
    for (final Column column : _columns) {
      document.<Column>format(column);
    }
    document.<IndexColumn>format(table.getIndexColumn());
  }

  public void format(final Object chaiseMinute, final IFormattableDocument document) {
    if (chaiseMinute instanceof XtextResource) {
      _format((XtextResource)chaiseMinute, document);
      return;
    } else if (chaiseMinute instanceof ChaiseMinute) {
      _format((ChaiseMinute)chaiseMinute, document);
      return;
    } else if (chaiseMinute instanceof Table) {
      _format((Table)chaiseMinute, document);
      return;
    } else if (chaiseMinute instanceof EObject) {
      _format((EObject)chaiseMinute, document);
      return;
    } else if (chaiseMinute == null) {
      _format((Void)null, document);
      return;
    } else if (chaiseMinute != null) {
      _format(chaiseMinute, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(chaiseMinute, document).toString());
    }
  }
}
